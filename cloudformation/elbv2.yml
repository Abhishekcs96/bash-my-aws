AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Subnets:
    ConstraintDescription: must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud.
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
Resources:
  EC2Instance1:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
               [cfn-auto-reloader-hook]
               triggers=post.update
               path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
               action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance1 --region ${AWS::Region}
               runas=root
              group: root
              mode: '000400'
              owner: root
            /var/www/html/index.html:
              content: <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
              group: root
              mode: '000644'
              owner: root
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
      Comment: Install a simple application
    Properties:
      ImageId: ami-032930428bf1abbff
      InstanceType: t2.small
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      SubnetId:
        Fn::Select:
        - 0
        - Ref: Subnets
      UserData: !Sub |+
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance1 --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance2 --region ${AWS::Region}
    Type: AWS::EC2::Instance
  EC2Instance2:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      InstanceType: t2.small
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      SubnetId:
        Fn::Select:
        - 1
        - Ref: Subnets
      UserData: !Sub |+
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance1 --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance2 --region ${AWS::Region}
    Type: AWS::EC2::Instance
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup

  # ALB
  ApplicationLoadBalancer:
    Properties:
      Subnets:
        Ref: Subnets
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ALBListener:
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ALBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ALBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      - Id: !Ref EC2Instance2
        Port: 80
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  # NLB
  NetworkLoadBalancer:
    Properties:
      Subnets: !Ref Subnets
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  NLBListener:
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref NLBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '80'
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  NLBTargetGroup:
    Properties:
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      - Id: !Ref EC2Instance2
        Port: 80
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
